typedef struct{
    int *nums;
    int top;
}Stack;

Stack *createStack(int maxsize){
    Stack *s = (Stack *)malloc(sizeof(Stack));
    s->nums = (int *)malloc(sizeof(int) * maxsize);
    s->top = 0;
    return s;
}

void push(Stack *s, int x){
    s->nums[s->top++] = x;
}

void pop(Stack *s){
    --s->top;
}

int top(Stack s){
    return s.nums[s.top - 1];
}

int isEmpty(Stack s){
    return s.top == 0;
}

void freeStack(Stack *s){
    free(s->nums);
    free(s);
}

int calPoints(char** ops, int opsSize) {
    Stack *s = createStack(opsSize);
    int sum = 0;
    for(int i = 0; i < opsSize; ++i){
        if((ops[i][0] >= '0' && ops[i][0] <= '9') || ops[i][0] == '-'){
            int len = strlen(ops[i]);
            int point = ops[i][--len] - '0';
            int t = 10;
            while(--len >= 0){
                if(ops[i][len] == '-'){
                    point *= -1;
                    break;
                }
                point += t * (ops[i][len] - '0');
                t *= 10;
            }
            push(s, point);
            sum += point;
        }
        else if(ops[i][0] == 'C'){
            sum -= top(*s);
            pop(s);
        }
        else if(ops[i][0] == 'D'){
            sum += 2 * top(*s);
            push(s, 2 * top(*s));
        }
        else if(ops[i][0] == '+'){
            int t1 = top(*s);
            pop(s);
            int t2 = top(*s);
            push(s, t1);
            sum += t1 + t2;
            push(s, t1 + t2);
        }
    }
    freeStack(s);
    return sum;
}